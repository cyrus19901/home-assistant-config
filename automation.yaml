- alias: "Wedding Notify"
  initial_state: on
  trigger:
    platform: state
    entity_id: sensor.wedding_countdown_days
  condition:
    condition: template
    value_template: '{{ states.sensor.wedding_countdown_days.state[-2:] | float == 00 }}'
  action:
    - service: notify.notify_push_android
      data_template:
        message: >
          Wedding is in {{ states.sensor.wedding_countdown_days.state }} days!!
  
#- id: arlo_arm
- alias: "Arlo Arm"
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: input_boolean.arlo_status
    from: 'off'
    to: 'on'
  action:
    service: script.turn_on
    entity_id: script.arlo_arm

#- id: arlo_disarm
- alias: "Arlo Disarm"
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: input_boolean.arlo_status
    from: 'on'
    to: 'off'
  action:
    service: script.turn_on
    entity_id: script.arlo_disarm

#- id: plant_light_on
- alias: "Plant Light on during Day"
  initial_state: 'on'
  trigger:
    platform: time
    after: '08:00:00'
  condition:
    - condition: state
      entity_id: input_boolean.plant_light_automation
      state: 'on'
  action:
    service: homeassistant.turn_on
    entity_id: switch.plant_light

#- id: plant_light_off
- alias: "Plant Light off at Night"
  initial_state: 'on'
  trigger:
    platform: time
    after: '21:00:00'
  action:
    service: homeassistant.turn_off
    entity_id: switch.plant_light

#- id: button_on
- alias: "Button Press On!"
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: sensor.bed_toggle_switch
    state: "true"
  action:
    service: homeassistant.turn_on
    entity_id: script.andrew_room_bedtime

#- id: button_off
- alias: "Button Press Off!"
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: sensor.bed_toggle_switch
    state: "false"
  action:
    service: homeassistant.turn_on
    entity_id: script.andrew_wakeup

- alias: "Mount /Plex"
  initial_state: on
  trigger:
    platform: state
    entity_id: switch.nas
    from: 'off'
    to: 'on'
    for:
      minutes: 1
  action:
    service: shell_command.mount_plex

#- id: ac_broken_cool
- alias: "Notify Andrew when AC BREAKS"
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: sensor.thermostat_setpoint
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: climate.thermostat
        state: 'cool'
      - condition: numeric_state
        entity_id: sensor.thermostat_setpoint
        below: '70'
  action: 
    - service: notify.notify_push_android
      data_template:
        message: AC Broke.. Turning Off...
    - service: climate.set_operation_mode
      data:
        entity_id: climate.thermostat
        operation_mode: 'off'

#- id: ac_broken_heat
- alias: "Notify Andrew when AC BREAKS"
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: sensor.thermostat_setpoint
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: climate.thermostat
        state: 'heat'
      - condition: numeric_state
        entity_id: sensor.thermostat_setpoint
        above: '72'
  action:
    - service: notify.notify_push_android
      data_template:
        message: AC Broke.. Turning Off...
    - service: climate.set_operation_mode
      data:
        entity_id: climate.thermostat
        operation_mode: 'off'
   
#- id: ac_setpoint_change
- alias: "Notify Andrew when AC setpoint changes"
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: sensor.thermostat_setpoint
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.ac_change_notification
        state: 'on'
      - condition: template
        value_template: '{{ trigger.entity_id != None }}'
      - condition: template
        value_template: '{{ trigger.from_state.state != trigger.to_state.state }}'
  action:
    - service: notify.notify_push_android
      data_template:
        message: >
          Setpoint Trigger: {{ trigger.to_state.state }}. Mode: {{ states.sensor.thermostat_operating_mode.state }}

#- id: ac_mode_change
- alias: "Notify Andrew when AC Mode changes"
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: sensor.thermostat_operating_mode
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.ac_change_notification
        state: 'on'
      - condition: template
        value_template: '{{ trigger.entity_id != None }}'
      - condition: template
        value_template: '{{ trigger.from_state.state != trigger.to_state.state }}'
  action:
    - service: notify.notify_push_android
      data_template:
        message: >
          Mode Trigger: {{ states.sensor.thermostat_setpoint.state }}. Mode: {{ trigger.to_state.state }}
